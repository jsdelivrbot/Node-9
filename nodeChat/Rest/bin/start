#!/usr/bin/env node

(function () {
  'use strict';

  let Sequelize = require('sequelize');

  let sequelize = new Sequelize('nodeChat', 'wAppUser', 'work', {
    dialect: 'postgres',
    pool: {
      maxConnections: 5,
      maxIdleTime: 30
    },
    timezone: '+00:00'
  });

  let System = require('systemjs');
  require('./../config');

  function onReject(error) {
    setTimeout(function errorTime() {
      //throw error;
      console.log('start failed!' + error);
    });
  }

  function resolveHost() {
    return new Promise(function(resolve, reject) {
      System.import('os').then(
        function importOsResolved(os) {
          System.import('dns').then(
            function importDnsResolved(dns) {
              let hostname = os.hostname();
              dns.lookup(hostname, function (error, address, family) {
                if (error) {
                  reject(error);
                } else {
                  resolve({ name: hostname, ip: address });
                }
              });
            },
            reject
          );
        },
        reject
      );
    });
  }

  function start(_server) {
    _server.start(sequelize).then(
      function serverStartResolved(server) {
        //
      },
      onReject
    );
  }

  System.import('./index').then(
    function importIndexResolved(_server) {
      _server = _server.index;

      resolveHost().then(
        function hostResolved(host) {
          console.log('Local IP for `' + host.name + '`: ' + host.ip);
          start(_server);
        },
        function hostRejected() {
          start(_server);
        }
      );
    },
    onReject
  );
})();
